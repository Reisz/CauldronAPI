CList = class("CList")
local _private = setmetatable({}, {__mode = "k"})

local function _newindex_fun(tbl, key, val)
        if type(key) == "number" then
            tbl[key] = val
        end
end

function CList:initialize(...)
    for i, v in ipairs({...}) do
        table.insert(self, i, v)
    end
    
    getmetatable(self).__newindex = _newindex_fun
end

function CList.static.fromTable(tbl)
    return CList(unpack(tbl))
end

function CList:copy()
    return CList(unpack(self))
end

function CList:insert(pos, value)
    if value == nil then
        value = pos
        pos = #self + 1
    end
    table.insert(self, pos, value)
end

function CList:at(pos)
    return self[pos]
end

function CList:maxn()
    return table.maxn(self)
end

function CList:length()
    return #self
end

function CList:find(value)
    for i,v in ipairs(self) do
        if v == value then return i end
    end
    return nil
end

function CList:findAll(value)
    local result = {}
    for i, v in ipairs(self) do
        if v == value then table.insert(result, i) end
    end
    return unpack(result)
end

function CList:remove(pos)
    pos = pos or #self
    return table.remove(self, pos)
end

function CList:removeAll(...)
    local input, result, offset = {...}, {}, 0
    table.sort(input)
    for _, v in ipairs(input) do 
        table.insert(result, self:remove(v - offset))
        offset = offset + 1
    end
    return unpack(result)
end

function CList:sort(comp)
    table.sort(self, comp)
end

function CList:dump()
    for i, v in ipairs(self) do print("[", i, "] = ", v) end
end

function CList:unpack()
    return unpack(self)
end
