local args = {...}
local version = -1 -- prerelease
local thisProgram = shell.getRunningProgram()
local source, dir = string.sub(thisProgram, 1, #thisProgram - #string.match(thisProgram, "/[^/]+$") + 1)

local function install(name)
	if fs.exists(dir .. name) then fs.delete(dir .. name) end
	fs.copy(source .. name, dir .. name)
    write(".")
end

local function advancedInput(message, default)
    if type(default) ~= "string" then
        default = ""
    end

    local _, y = term.getCursorPos()
    term.clearLine()
    term.setCursorPos(1, y)
    term.write(message)
    
    local input = default
    while true do
        term.clearLine()
        term.setCursorPos(1, y)
        term.write(message)
        term.write(input)

        local e, p = os.pullEvent()
        if e == "char" then
            input = input .. p
        elseif e == "key" then
            if p == 14 then -- backspace
                input = string.sub(input, 1, #input - 1)
            elseif p == 28 then -- enter
                return input
            end
        end
    end
end

-- prepare terminal
term.setTextColor(colors.white)
term.setBackgroundColor(colors.black)

-- get install directory
shell.setDir("")

if args[1] then
    dir = shell.resolve(args[1])
end

if not dir then
    term.clear()
    term.setCursorPos(1,1)
    dir = shell.resolve(advancedInput("Choose an install path > ", "CLibs"))
    while not dir do
        term.clear()
        term.setCursorPos(1,1)
        write("Invalid Path!\n")
        dir = shell.resolve(advancedInput("Choose an install path > ", "CLibs"))
    end
    write("\n")
end


write("Starting setup...\n\n")
fs.makeDir(dir)
if not string.find(dir, "/$") then dir = dir .. "/" end

write("Cauldron")
    local fileC = fs.open("Cauldron", "w")

    if not fileC then
        write('\nFailed to open the file "Cauldron", setup will be aborted.\n')
        return
    end

    fileC.write("-- Load file generated by installer\n" ..
                "Cauldron = {}\n\n" ..
                "function Cauldron.version() return " .. version .. " end\n\n" ..
                'function Cauldron.libDirectory(sub) return "' .. dir .. '" .. sub end\n\n' ..
                'shell.run("' .. dir .. 'load")\n')
    fileC.close()
write(" ok\n")

write("Loader")
	install("load")
	install("middleclass")
write(" ok\n")

write("Modules")
    install("CCore")
write(" ok\n")

write("\nFinished installation...\n")
