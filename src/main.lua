-- Load file generated by installer
Cauldron = setmetatable({}, {
    __index = enumKeys,
    __tostring = function()
        return "Cauldron " .. Cauldron.versionString()
    end
})

-- Dynamic stuff
function Cauldron.version() return %i end
function Cauldron.versionString() return %q end
function Cauldron.libDirectory(sub) return %q .. sub end

-- Enums
local enums = {}
local enumKeys = {}

local function _add_enum(name, enum)
    enums[name] = enum
    for i,v in pairs(enum) do
        if enumKeys[i] then print("Warning: Overwirting enum ", string.fromat("%%q", i), ": ", enumKeys[i], " -> ", v) end
        enumKeys[i] = v
    end
end

_add_enum("ConnectionType", {AutoConnection = 0, DirectConnection = 1, QueuedConnection = 2, BlockingQueuedConnection = 3, UniqueConnection = 128})
               
-- Loading helpers
local function _load(name)
    shell.run(Cauldron.libDirectory(name))
end

local function _scan(dir)
    dir = dir .. "/"
    local files = fs.list(dir)
    for _, v in ipairs(files) do
        if fs.isDir(dir .. v) then
            _scan(dir .. v)
        else
            shell.run(dir .. v)
        end
    end
end

Cauldron._loaded = {}

-- Actual load function
function Cauldron.loadModule(name)
    if Cauldron._loaded[name] then return end
    _scan(Cauldron.libDirectory("") .. name)
    Cauldron._loaded[name] = true
end

-- API is useless without them
_load("middleclass.lua")
Cauldron.loadModule("CCore")
